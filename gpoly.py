from ctypes import *
import math
import random
import binascii
import secrets

c_poly = CDLL('./c_poly.so')
 
def listequals(a, b):
    if len(a) != len(b): return False
    for i in range(len(a)):
        if a[i] != b[i]:
            return False
    return True

class Poly(object):
    def __init__(self, n, q, coeffs = None):
        self.n = n
        self.q = q
        if coeffs is None:
            data = [0 for i in range(n)]
            self.coeffs = (c_int64 * n)(*data)
        else:
            if len(coeffs) != n: raise ValueError
            self.coeffs = coeffs

    def dupe(self):
        r = Poly(self.n,self.q)
        r.coeffs = (c_int64 * self.n)(*[self.coeffs[i] for i in range(self.n)])
        return r

    def canonicalize_q(self):
        for i in range(self.n):
            self[i] = (self[i] % self.q)

    def canonicalize_centred(self):
        self.canonicalize_q()
        for i in range(self.n):
            if self[i] > (self.q - 1) / 2:
                self[i] = self[i] - self.q

    def __str__(self):
        # self.canonicalize_centred()
        return str([self.coeffs[i] for i in range(self.n)])
    
    def __eq__(self, other):
        self.canonicalize_q()
        other.canonicalize_q()
        return self.n == other.n and self.q == other.q and listequals(self.coeffs, other.coeffs)

    def __getitem__(self, i):
        return self.coeffs[i]
    
    def __setitem__(self, i, v):
        self.coeffs[i] = v

    def addpy(self, other):
        if self.n != other.n or self.q != other.q: raise Exception
        r = Poly(self.n, self.q)
        for i in range(self.n):
            r[i] = (self[i] + other[i]) % self.q
        return r

    def addc(self, other):
        if self.n != other.n or self.q != other.q: raise Exception
        r = Poly(self.n,self.q)
        c_poly.poly_add(byref(r.coeffs), byref(self.coeffs), byref(other.coeffs), self.n)
        return r

    def __add__(self, other):
        return self.addc(other)

    def mulpy(self, other):
        r = Poly(self.n, self.q)
        if isinstance(other, int):
            for i in range(self.n):
                r[i] = (self[i] * other) % self.q
            return r
        else:
            if self.n != other.n or self.q != other.q: raise Exception
            for i in range(self.n):
                for j in range(self.n):
                    r[(i + j) % self.n] += (self[i] * other[j]) * (1 if i + j < self.n else -1)
                    r[(i + j) % self.n] %= self.q
            return r
    
    def mulc(self, other):
        r = Poly(self.n, self.q)
        if isinstance(other, int):
            c_poly.poly_mul_int(byref(r.coeffs), byref(self.coeffs), c_int64(other), self.n)
        else:
            c_poly.poly_mul(byref(r.coeffs), byref(self.coeffs), byref(other.coeffs), self.n)
        return r

    def mulcmont(self, other):
        r = Poly(self.n, self.q)
        if isinstance(other, int):
            c_poly.poly_mul_int(byref(r.coeffs), byref(self.coeffs), c_int64(other), self.n)
        else:
            c_poly.poly_mul_mont(byref(r.coeffs), byref(self.coeffs), byref(other.coeffs), self.n)
        return r

    def __mul__(self, other):
        return self.mulc(other)
    
    def __rmul__(self, other):
        return self * other

    @staticmethod
    def uniform(n, q, rng = random):
        x = Poly(n,q)
        for i in range(n):
            x[i] = rng.randrange(q)
        return x
    
    @staticmethod
    def discretegaussian(n, q, gamma, seed = None): # samples random polynomial with each coefficient from a discrete Gaussian of parameter gamma; caller needs to scale gamma appropriately based on number of coefficients
        x = Poly(n,q)
        if seed:
            c_poly.init_rand(seed)
        else:
            seed = secrets.randbits(32)
            c_poly.init_rand(seed)
        for i in range(n):
            x[i] = c_poly.sample_from_cdf()
        return x
    
    @staticmethod
    def zero(n, q):
        x = Poly(n,q)
        return x

c_poly.init_rand(0)

if __name__ == "__main__":
    NUM_TESTS = 1
    n = 512
    q = 26038273
    # Addition tests
    for i in range(NUM_TESTS):
        a = Poly.uniform(n, q)
        b = Poly.uniform(n, q)
        c1 = a.addpy(b)
        c2 = a.addc(b)
        if c1 != c2:
            print("MISMATCH:")
            print("a                 = {:s}".format(str(a)))
            print("b                 = {:s}".format(str(b)))
            print("a + b (in Python) = {:s}".format(str(c1)))
            print("a + b (in C)      = {:s}".format(str(c2)))
            assert False
    print("Addition tests passed")
    # Polynomial multiplication tests
    for i in range(NUM_TESTS):
        a = Poly.uniform(n, q)
        b = Poly.uniform(n, q)

        # An example to indicate errors in the function mulcmont
        # a1 = [22610014, 18846827, 15016048, 20252025, 7155322, 8491115, 20768065, 6355238, 24520478, 13115330, 18942736, 4203818, 12426175, 4167818, 20472159, 11457195, 6536067, 12856654, 9325327, 12434019, 16153040, 22046325, 2213647, 10375392, 360137, 9986130, 25662971, 5391779, 19481043, 20604139, 24107570, 22023976, 19306256, 1068099, 18928197, 16447301, 413856, 2220994, 25085329, 7208061, 12206511, 5504616, 3465943, 3685738, 20492373, 147634, 21167723, 25690939, 22916260, 22975642, 9864747, 21179531, 21469899, 7331467, 3698311, 22149203, 9915232, 13917834, 14779814, 7453746, 21268429, 4794271, 9639194, 3769210, 3926242, 21881711, 3056564, 1750879, 25047870, 20556784, 15885727, 20667409, 17646560, 4130186, 20577082, 12506349, 11342061, 6899485, 3064610, 5318039, 5557714, 17384888, 17028237, 21421515, 3294599, 15642754, 395002, 22813132, 14593362, 9291250, 22808177, 21451041, 9628497, 21394730, 23108507, 16742443, 19164402, 8156825, 14048585, 1480137, 11204498, 13788435, 18732549, 9032360, 18579624, 1623906, 7519863, 5988082, 16575606, 15092596, 14696017, 12366467, 22668785, 15611037, 12512068, 12094811, 9262855, 6678609, 20424427, 2914589, 25366240, 24877753, 13340499, 3249288, 20295499, 16330471, 20971108, 24514702, 11791624, 20560845, 14215066, 22106879, 17852331, 7478655, 10794571, 21918788, 6450891, 25935993, 16637654, 18932071, 13706760, 13162835, 25452347, 12294550, 8677225, 19540450, 1505716, 13686964, 20205549, 1186557, 19645545, 16569021, 14053407, 20880656, 9840167, 17224678, 611896, 770400, 22357272, 12793941, 16925341, 16721190, 21208789, 20280393, 16010041, 15415785, 1491580, 2585379, 3971650, 2970315, 17674494, 17626090, 17030839, 15195992, 15053304, 2958643, 8852759, 24256475, 14895030, 18393585, 25771851, 9178407, 23546582, 14416875, 24038368, 19870922, 3803337, 20513459, 20574226, 12206963, 18153876, 1040720, 14075447, 10363284, 7109675, 6133922, 22576419, 15524196, 15468637, 15819478, 17099648, 6490405, 19700938, 11269527, 2436397, 20562293, 11948942, 16935322, 23351079, 6076810, 6521329, 4733504, 6805331, 19341991, 19865741, 1775568, 15645871, 2231308, 13871580, 1766870, 5659453, 12372475, 4502387, 14809129, 14593017, 7607098, 5517425, 18033209, 13911180, 12165570, 21890364, 20437239, 25729853, 16908285, 5657741, 89844, 7533752, 23093561, 259575, 4942994, 17255542, 7158486, 6866639, 4486001, 5382959, 18691661, 7550589, 17149310, 7701636, 8468995, 15827169, 10404951, 12201673, 15670054, 5205072, 18327500, 9107285, 2455162, 1479438, 15613458, 17483477, 18188900, 12128196, 16810199, 18530322, 9717179, 20023773, 11550734, 12081339, 19227536, 12128737, 19021099, 5526252, 2681008, 20652224, 25336657, 12809335, 8614266, 17987893, 9022719, 7720432, 24955767, 18634593, 23251827, 8432046, 17722787, 8470605, 4895396, 5668549, 17645707, 13264168, 1998277, 11544747, 21890930, 10172610, 10164124, 10307566, 23849019, 10052560, 5616232, 19471522, 1390521, 16457525, 3553412, 9499635, 1687683, 23560649, 19241237, 24455410, 3861743, 11110255, 15626294, 22838091, 4498581, 21818625, 23987201, 23166237, 168726, 485912, 18872780, 22966259, 11626659, 15186999, 11496763, 19395795, 11860919, 23722924, 12493840, 9057868, 25166256, 13985411, 10734738, 5039251, 14658739, 9988434, 24798730, 2976153, 25645413, 5594266, 22225796, 13805214, 21397680, 14898173, 21702392, 24684013, 22969433, 8052888, 3087535, 6781467, 6163007, 6579687, 708919, 1973335, 18734920, 3378905, 10197419, 25738177, 23809473, 25732315, 3432878, 12264017, 1245913, 9950482, 7238536, 2033548, 4973154, 14360079, 2232355, 21453887, 5850437, 11552860, 21384438, 20074374, 8429091, 22938219, 24928314, 18568453, 23046443, 7942908, 11248913, 18521713, 5819265, 3386563, 24650529, 3852190, 17067166, 12230251, 15891405, 4931427, 19450442, 20154659, 22773992, 13572263, 10763523, 19228037, 9318358, 19287692, 2421476, 8182732, 10814175, 12639301, 18924547, 14228544, 7877185, 4775504, 21337424, 15172979, 13920761, 25139336, 920341, 2354884, 12493791, 13218997, 18601714, 6194604, 19777969, 14570643, 5440214, 22210602, 14062340, 8109616, 9867350, 250194, 14303152, 23072399, 12338125, 14970787, 202767, 23782242, 10160535, 7363393, 12132581, 10832829, 13168258, 12954983, 19853681, 14168701, 13127874, 3942919, 25933873, 4324587, 312957, 1072849, 5257465, 17475654, 22648387, 21008624, 13177399, 1118001, 7746476, 7432915, 13095326, 17590113, 21057475, 12501726, 11518181, 8668838, 10851018, 15198331, 23596499, 6389348, 9763964, 13176356, 3330076, 16281066, 25073389, 6262615, 18690213, 18895322, 11115416, 25962909, 21903895, 873534, 15567760, 19237924, 3501971, 22533907, 25272466, 11280265, 19938090, 25819513, 1928387, 15310663, 1026923, 17108186, 14524082, 2545611, 25527090, 25083529, 14646384, 5302935, 13896847, 154379, 14789205, 14742942, 17963884, 17452685, 23287125, 21966393, 13923116, 14155286, 3497651, 202317, 24837005, 18989493, 4524450, 14176615, 1320821, 23100754, 7152173, 3708501, 24345528]
        # b1 = [7611674, 25119423, 25951590, 22699977, 25720999, 694797, 21338547, 21483443, 4635209, 11521351, 16709129, 7711449, 17217536, 18335825, 16537901, 21160589, 3586381, 25094257, 2396234, 14523542, 4196280, 24605902, 22200519, 11580894, 12548214, 6351669, 25012721, 14383109, 17505326, 12558557, 17301943, 20223416, 12688001, 13579318, 24740642, 7881548, 25804702, 17916437, 12018127, 967962, 10616515, 6517629, 15301071, 17270398, 8552623, 21399100, 7254163, 5546215, 15257305, 14767364, 20382842, 19466086, 25078038, 23663604, 177285, 2841323, 17927983, 1913195, 15295333, 24586047, 12849635, 2262523, 19787214, 25364998, 23666275, 5293672, 13179082, 17921334, 10376351, 19396661, 4713082, 11304823, 10445631, 4107985, 19739553, 11935472, 19874689, 24677043, 2705294, 8005161, 13607640, 11585686, 15670991, 25411096, 21159359, 24365006, 21047191, 22871013, 8784318, 13373419, 2232057, 25246827, 14896555, 6367405, 7234358, 8270199, 22616196, 23616202, 811634, 17331855, 18616933, 4015141, 19393588, 22406253, 11602115, 2543515, 824189, 3609015, 13942937, 20358612, 3533053, 23855540, 25712128, 20078339, 13622076, 20546026, 23095402, 3846910, 3911550, 19901956, 25077954, 14682908, 12846403, 24700673, 12953633, 11045147, 1688638, 25975789, 22679951, 9778020, 23100359, 18526532, 4504197, 19897069, 13967752, 7088680, 24397610, 7801352, 6594887, 11317998, 6891517, 10434860, 16536202, 819568, 7433480, 14148046, 11768670, 25066406, 3126239, 21732156, 3783348, 24390871, 24589650, 8045240, 10822892, 25517210, 15943689, 24942699, 23156585, 4106005, 11484427, 14575630, 18271880, 17280598, 16205976, 15564298, 22766056, 19770270, 14932991, 1648399, 25850932, 9987186, 14166628, 17611834, 7077635, 9291970, 13341737, 8592063, 19068484, 12586313, 19642049, 18339726, 1824312, 6087722, 16377177, 3775772, 16443526, 13718682, 21901874, 14850494, 19168042, 9612320, 1130526, 7382875, 9003749, 2253609, 11166539, 13145517, 18077444, 22613899, 4634422, 19408174, 23584924, 21659613, 24479586, 24485390, 24449588, 14291162, 16014757, 17929211, 14811264, 23821789, 12722351, 25648239, 22736807, 8508710, 24794062, 16092386, 20389077, 22772337, 7013969, 19382686, 7716591, 16750019, 16209425, 22128078, 11027815, 23172824, 10386111, 8012018, 13275991, 16973595, 12443231, 17861253, 14890127, 307087, 5312383, 12783285, 22764098, 24361488, 1946639, 25228102, 11354160, 15295624, 17694967, 25635328, 24102894, 22290639, 14506912, 11861946, 2889386, 20717614, 25057005, 21401633, 12691860, 25959812, 21559540, 7666820, 2372611, 12244617, 7828127, 10662494, 20859457, 6679838, 19882437, 21665579, 24878498, 22422572, 22461880, 16322276, 7658320, 1796158, 17358963, 6051242, 6426032, 24621670, 9337816, 879735, 25036532, 1001078, 16228013, 6514356, 5893150, 14804560, 12935871, 16382907, 25611446, 15391459, 4065549, 24620322, 7292794, 1338861, 7066287, 17846906, 12024414, 1517591, 18221703, 8806465, 12040889, 22985373, 25835964, 9280107, 3640089, 3998316, 1891924, 8287959, 10133461, 3902633, 23856330, 183442, 2163460, 12479187, 7528141, 12136025, 2006665, 21402635, 16466570, 12845753, 521535, 19629631, 144415, 3688052, 4539794, 9597929, 129542, 12813925, 9555918, 14811618, 227796, 16382870, 17842749, 13598518, 20865630, 7582476, 3184117, 3710502, 17959872, 11800789, 25262345, 21717357, 11951314, 24688455, 10753162, 20608536, 523212, 15936114, 5562256, 6903227, 17447331, 5177139, 21260429, 4370548, 2077012, 20074410, 25937840, 25492603, 22418962, 5429212, 1999366, 25198060, 18365848, 107524, 17060457, 13315608, 15188750, 22583238, 3511566, 24010280, 4742082, 11503619, 22142912, 16375564, 18457867, 22588503, 10130468, 8372203, 4108880, 1820382, 11889327, 15821323, 13738265, 282576, 456177, 13973387, 15408665, 15294079, 20142704, 17359529, 21764589, 15749083, 22583934, 23856226, 12875092, 21332137, 20186313, 8344318, 20227939, 8462641, 1749471, 9439327, 24102531, 19576068, 12176842, 20743227, 22843416, 23313333, 8646857, 5269511, 22284884, 3832137, 25683064, 8011452, 19981681, 9685585, 17530315, 18726316, 8882435, 716349, 11072846, 3957832, 24442097, 3736460, 47584, 19690989, 25431727, 25205696, 22854025, 20459621, 3247165, 4637675, 12971183, 14962073, 12565515, 10416832, 9108051, 8715780, 25234955, 7151665, 1420940, 20227745, 16775997, 25362875, 4772516, 23544302, 2760285, 9112108, 5848291, 21480297, 20354141, 2425458, 14060993, 20413272, 19368411, 14309849, 12299655, 6896036, 12784692, 16077386, 14776463, 24789544, 18742805, 11008022, 8135916, 386314, 22023944, 24236240, 6478977, 11094058, 23095825, 6984069, 16102134, 2915961, 24201002, 8152611, 16562648, 19180073, 5067212, 16333589, 3184668, 2755583, 17727498, 15718268, 20379269, 1835710, 5301440, 10877371, 3922375, 16206379, 19496554, 19925507, 5711095, 5184253, 24400298, 19336206, 12443192, 13248079, 25899556, 23303475, 3754470, 12099301, 18930316, 16025061, 1107572, 24066030, 7437908, 18568139, 5546956, 25686665, 1156772, 12293176, 13558933, 9878002]
        # a = Poly(n,q)
        # b = Poly(n,q)
        # for i in range(n):
        #     a[i] = a1[i]
        #     b[i] = b1[i]
        # c1 = a.mulcmont(b)

        c1 = a.mulpy(b)
        c2 = a.mulc(b)
        if c1 != c2:
            print("MISMATCH:")
            print("a                 = {:s}".format(str(a)))
            print("b                 = {:s}".format(str(b)))
            print("a * b (in mulcmont) = {:s}".format(str(c1)))
            print("a * b (in mulc)      = {:s}".format(str(c2)))
            assert False
    print("Polynomial multiplication tests passed")




